---
import PageHeading from "../components/page-heading.astro";
import PostsLoop from "../components/posts-loop.astro";
import Layout from "../layouts/main.astro";
import { getCollection } from "astro:content";

// Get all posts for client-side search
const allPosts = await getCollection("post");
const serializedPosts = allPosts.map((post) => ({
  title: post.data.title,
  description: post.data.description,
  dateFormatted: post.data.dateFormatted,
  tags: post.data.tags || [],
  slug: post.slug,
  link: `/post/${post.slug}`,
}));
---

<Layout title="Blog">
  <section class="relative z-20 max-w-2xl mx-auto my-12 px-7 lg:px-0">
    <PageHeading
      title="Blog"
      description="Dive into my thoughts on life and technology in my latest posts; a blend of introspection and innovation. Stay tuned for new ideas and updates!"
    />

    <!-- Search Bar -->
    <div class="my-8">
      <div class="relative">
        <input
          type="text"
          id="search-input"
          placeholder="Search posts..."
          class="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 dark:bg-neutral-800 dark:border-neutral-700 dark:text-neutral-200 transition-colors"
        />
        <svg 
          xmlns="http://www.w3.org/2000/svg" 
          class="absolute right-3 top-2.5 h-5 w-5 text-gray-400 dark:text-neutral-500" 
          fill="none" 
          viewBox="0 0 24 24" 
          stroke="currentColor"
        >
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
        </svg>
      </div>
      <div id="search-results-count" class="mt-2 text-sm text-gray-600 dark:text-neutral-400 hidden">
        Found <span id="results-count">0</span> results
      </div>
    </div>

    <div id="posts-container" class="z-50 flex flex-col items-stretch w-full gap-5">
      <PostsLoop count="999999999" />
    </div>

    <!-- No Results Message -->
    <div id="no-results" class="hidden text-center py-8">
      <p class="text-lg text-gray-600 dark:text-neutral-400">No posts found matching your search.</p>
      <button id="clear-search" class="mt-4 px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors">
        Clear Search
      </button>
    </div>
  </section>
</Layout>

<script define:vars={{ serializedPosts }}>
  // Client-side search logic
  document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('search-input');
    const postsContainer = document.getElementById('posts-container');
    const noResults = document.getElementById('no-results');
    const clearSearchBtn = document.getElementById('clear-search');
    const resultsCountDisplay = document.getElementById('search-results-count');
    const resultsCount = document.getElementById('results-count');
    
    // Store original posts HTML for resetting
    const originalPostsHtml = postsContainer.innerHTML;
    
    searchInput.addEventListener('input', debounce(handleSearch, 300));
    
    clearSearchBtn.addEventListener('click', () => {
      searchInput.value = '';
      postsContainer.innerHTML = originalPostsHtml;
      postsContainer.classList.remove('hidden');
      noResults.classList.add('hidden');
      resultsCountDisplay.classList.add('hidden');
    });
    
    function handleSearch() {
      const query = searchInput.value.toLowerCase().trim();
      
      if (!query) {
        // Reset to original state if search is cleared
        postsContainer.innerHTML = originalPostsHtml;
        postsContainer.classList.remove('hidden');
        noResults.classList.add('hidden');
        resultsCountDisplay.classList.add('hidden');
        return;
      }
      
      // Filter posts based on search query
      const filteredPosts = serializedPosts.filter(post => {
        return (
          post.title.toLowerCase().includes(query) || 
          post.description.toLowerCase().includes(query) ||
          (post.tags && post.tags.some(tag => tag.toLowerCase().includes(query)))
        );
      });
      
      if (filteredPosts.length === 0) {
        // Show no results message
        postsContainer.classList.add('hidden');
        noResults.classList.remove('hidden');
        resultsCountDisplay.classList.add('hidden');
      } else {
        // Update count and show results
        resultsCount.textContent = filteredPosts.length;
        resultsCountDisplay.classList.remove('hidden');
        
        // Rebuild posts loop with filtered results
        const allPostElements = document.querySelectorAll('#posts-container > div');
        
        allPostElements.forEach(postEl => {
          const postLink = postEl.querySelector('a').getAttribute('href');
          const postSlug = postLink.split('/').pop();
          
          // Check if this post is in our filtered results
          const isVisible = filteredPosts.some(post => post.link.includes(postSlug));
          
          postEl.style.display = isVisible ? 'block' : 'none';
        });
        
        postsContainer.classList.remove('hidden');
        noResults.classList.add('hidden');
      }
    }
    
    // Debounce function to limit how often search is performed
    function debounce(func, wait) {
      let timeout;
      return function executedFunction(...args) {
        const later = () => {
          clearTimeout(timeout);
          func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
      };
    }
  });
</script>
